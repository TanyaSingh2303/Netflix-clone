{"version":3,"sources":["axios.js","requests.js","Components/Banner.js","Components/Navbar.js","Components/Row.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","useState","movie","setMovie","trailerurl","setTrailerurl","useEffect","a","get","request","data","results","Math","floor","random","length","fetchData","className","onClick","style","backgroundSize","backgroundImage","backdrop_path","backgroundPosition","title","name","original_name","movieTrailer","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","overview","substr","videoId","opts","height","width","playerVars","autoplay","Navbar","show","handleShow","window","addEventListener","scrollY","removeEventListener","src","alt","Row","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","map","poster_path","id","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sUAOeA,E,OAJGC,EAAMC,OAAO,CAC3BC,QAAS,iCCJPC,EAAU,mCAYDC,EAVE,CACbC,cAAc,8BAAD,OAAgCF,EAAhC,mBACbG,sBAAsB,wBAAD,OAAyBH,EAAzB,sBACrBI,cAAc,4BAAD,OAA8BJ,EAA9B,mBACbK,kBAAkB,2BAAD,OAA6BL,EAA7B,mBACjBM,kBAAkB,2BAAD,OAA6BN,EAA7B,mBACjBO,kBAAkB,2BAAD,OAA6BP,EAA7B,mBACjBQ,mBAAmB,2BAAD,OAA6BR,EAA7B,sBAClBS,mBAAmB,2BAAD,OAA6BT,EAA7B,oB,8BC4FPU,MA/Ff,WACE,IAmBmBC,EAAKC,EAnBxB,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAoCF,mBAAS,IAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KA2CE,OAzCFC,qBAAU,WAAM,4CAEd,4BAAAC,EAAA,sEAC0BtB,EAAMuB,IAAInB,EAASE,uBAD7C,cACUkB,EADV,OAGIN,EACIM,EAAQC,KAAKC,QACTC,KAAKC,MAAMD,KAAKE,SAAWL,EAAQC,KAAKC,QAAQI,OAAS,KALrE,kBAQWN,GARX,4CAFc,uBAAC,WAAD,wBAYZO,KAED,IA4BC,gCACC,yBAAQC,UAAU,SAClBC,QAAS,kBAAMb,EAAc,KAC7Bc,MAAO,CACHC,eAAgB,QAChBC,gBAAgB,6DAAD,cAC4BnB,QAD5B,IAC4BA,OAD5B,EAC4BA,EAAOoB,cADnC,mBAGfC,mBAAoB,iBAPxB,UAWI,sBAAKN,UAAU,mBAAf,UAEI,oBAAIA,UAAU,gBAAd,UACU,OAALf,QAAK,IAALA,OAAA,EAAAA,EAAOsB,SAAP,OAAgBtB,QAAhB,IAAgBA,OAAhB,EAAgBA,EAAOuB,QAAvB,OAA+BvB,QAA/B,IAA+BA,OAA/B,EAA+BA,EAAOwB,iBAE3C,sBAAKT,UAAU,kBAAf,UAEI,wBACCC,QAAS,kBA3CH,SAAChB,GAEhBE,EACDC,EAAc,IAEdsB,KAAkB,OAALzB,QAAK,IAALA,OAAA,EAAAA,EAAOuB,OAAQ,IAC3BG,MAAK,SAAAC,GACJ,IAAMC,EAAY,IAAIC,gBAAiB,IAAIC,IAAIH,GAAKI,QACpD5B,EAAcyB,EAAUtB,IAAI,SAE3B0B,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,MAiCNG,CAAYpC,IAEzBe,UAAU,iBAHZ,kBAMA,wBAAQA,UAAU,iBAAlB,wBAKL,oBAAIA,UAAU,sBAAd,UAxDOlB,EA0DM,OAACG,QAAD,IAACA,OAAD,EAACA,EAAOqC,SA1DTvC,EA0DmB,KAzD7B,OAAHD,QAAG,IAAHA,OAAA,EAAAA,EAAKgB,QAASf,EAAID,EAAIyC,OAAO,EAAGxC,EAAI,GAAK,MAAQD,QA8DrD,qBAAKkB,UAAU,0BAIhBb,GAAc,cAAC,IAAD,CACTqC,QAASrC,EACTsC,KApDU,CACXC,OAAQ,MACRC,MAAO,OACPC,WAAY,CACVC,SAAS,U,MCXRC,MAjCf,WAEI,MAA2B9C,oBAAS,GAApC,mBAAO+C,EAAP,KAAaC,EAAb,KAcA,OAZF3C,qBAAU,WAMN,OALA4C,OAAOC,iBAAiB,UAAU,WAC3BD,OAAOE,QAAU,IAChBH,GAAW,GACTA,GAAW,MAEd,WACHC,OAAOG,oBAAoB,aAGhC,IAGG,sBAAKpC,UAAS,iBAAY+B,GAAQ,cAAlC,UAEI,qBACA/B,UAAU,YACTqC,IAAI,yDACLC,IAAI,YACJ,qBACAtC,UAAU,cACVqC,IAAI,yEACJC,IAAI,e,MCuCDC,MA7Df,YAAgD,IAAjChC,EAAgC,EAAhCA,MAAQiC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,WAC/B,EAA4BzD,mBAAS,IAArC,mBAAO0D,EAAP,KAAeC,EAAf,KAEA,EAAoC3D,mBAAS,IAA7C,mBAAO4D,EAAP,KAAmBC,EAAnB,KAgCE,OA9BFxD,qBAAU,WAAM,4CACd,4BAAAC,EAAA,sEACuBtB,EAAMuB,IAAIiD,GADjC,cACOhD,EADP,OAECmD,EAAUnD,EAAQC,KAAKC,SAFxB,kBAGQF,GAHR,4CADc,uBAAC,WAAD,wBAKZO,KAED,CAACyC,IAwBE,sBAAKxC,UAAU,MAAf,UACI,6BAAKO,IAEL,qBAAKP,UAAU,eAAf,gBAEG0C,QAFH,IAEGA,OAFH,EAEGA,EAAQI,KAAI,SAAA7D,GAAK,OAChB,qBAEAgB,QAAS,kBAtBF,SAAChB,GAChB2D,EACDC,EAAc,IAEdnC,KAAkB,OAALzB,QAAK,IAALA,OAAA,EAAAA,EAAOuB,OAAQ,IAC3BG,MAAK,SAAAC,GACJ,IAAMC,EAAY,IAAIC,gBAAiB,IAAIC,IAAIH,GAAKI,QACpD6B,EAAchC,EAAUtB,IAAI,SAE3B0B,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,MAaPG,CAAYpC,IAC1Be,UAAS,uBAAkByC,GAAc,mBAAhC,KACTJ,IAAG,UAhDH,wCAgDG,OAAeI,EAAU,OAAGxD,QAAH,IAAGA,OAAH,EAAGA,EAAO8D,YAAV,OAAwB9D,QAAxB,IAAwBA,OAAxB,EAAwBA,EAAOoB,eAC3DiC,IAAKrD,EAAMuB,MAJNvB,EAAM+D,SAUdJ,GAAc,cAAC,IAAD,CACdpB,QAASoB,EACTnB,KAzCG,CACXC,OAAQ,MACRC,MAAO,OACPC,WAAY,CACVC,SAAS,UCYDoB,MA9Bf,WACE,OACE,sBAAKjD,UAAU,MAAf,UAEE,cAAC,EAAD,IAEA,cAAC,EAAD,IAEA,cAAC,EAAD,CAAKO,MAAM,oBAAoBiC,SAAUpE,EAASE,sBAClDmE,YAAU,IAEV,cAAC,EAAD,CAAKlC,MAAM,eAAeiC,SAAUpE,EAASC,gBAE7C,cAAC,EAAD,CAAKkC,MAAM,YAAYiC,SAAUpE,EAASG,gBAE1C,cAAC,EAAD,CAAKgC,MAAM,iBAAiBiC,SAAUpE,EAASO,qBAE/C,cAAC,EAAD,CAAK4B,MAAM,gBAAgBiC,SAAUpE,EAASI,oBAE9C,cAAC,EAAD,CAAK+B,MAAM,gBAAgBiC,SAAUpE,EAASM,oBAE9C,cAAC,EAAD,CAAK6B,MAAM,gBAAgBiC,SAAUpE,EAASK,oBAE9C,cAAC,EAAD,CAAK8B,MAAM,gBAAgBiC,SAAUpE,EAASQ,yBCnBrCsE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBzC,MAAK,YAAkD,IAA/C0C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.34975d2d.chunk.js","sourcesContent":["import axios from \"axios\";\n\n\nconst  instance = axios.create({\n    baseURL: \"https://api.themoviedb.org/3\"\n});\n\nexport default instance;","const API_KEY = \"76deadecb4e996be0639c6b2a624a68c\" ;\n\nconst requests = {\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n    fetchNetflixOriginals:`/discover/tv?api_key=${API_KEY}&with_networks=213`,\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US` ,\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\n}\nexport default requests;","import React, { useEffect, useState } from 'react';\nimport './Banner.css';\nimport axios from '../axios';\nimport requests from '../requests';\nimport movieTrailer from 'movie-trailer';\nimport YouTube from 'react-youtube';\n\nfunction Banner() {\n  const [movie, setMovie] = useState([]);\n  const [trailerurl, setTrailerurl] = useState(\"\");\n\n  useEffect(() => {\n      \n    async function fetchData() {\n        const request = await axios.get(requests.fetchNetflixOriginals) ;\n\n        setMovie(\n            request.data.results[\n                Math.floor(Math.random() * request.data.results.length - 1)\n            ]\n        );\n        return request;\n       \n    } fetchData();\n\n  }, []) \n\n   function truncate(str ,n) {\n      return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;  };\n\n      const handleClick = (movie) => {\n        \n        if(trailerurl){\n          setTrailerurl(\"\");\n        }else{\n          movieTrailer(movie?.name || \"\")\n          .then(url => {\n            const urlParams = new URLSearchParams( new URL(url).search);\n            setTrailerurl(urlParams.get('v'));\n   \n          }).catch(error => console.log(error))\n        }\n          };\n\n          const opts = {\n            height: \"390\",\n            width: \"100%\",\n            playerVars: {\n              autoplay:1,\n            },\n          }\n  \n    return (\n      <div>\n       <header className=\"banner\"\n       onClick={() => setTrailerurl(\"\")}\n       style={{\n           backgroundSize: \"cover\",\n           backgroundImage: `url(\n               \"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\"\n           )`,\n           backgroundPosition: \"center-center\",\n       }}\n       >\n\n           <div className=\"banner__contents\">\n\n               <h1 className=\"banner__title\">\n                   {movie?.title || movie?.name || movie?.original_name}\n               </h1>\n               <div className=\"banner__buttons\">\n\n                   <button\n                    onClick={()=> handleClick(movie)}\n\n                     className=\"banner__button\">\n                     Play\n                   </button>\n                   <button className=\"banner__button\">\n                     My List \n                   </button>\n\n               </div>\n              <h1 className=\"banner__description\">\n\n                  {truncate(movie?.overview, 150)}\n\n              </h1>\n           </div>\n         \n         <div className=\"banner--fadeBottom\"/>\n         \n       </header>\n      \n       {trailerurl && <YouTube\n             videoId={trailerurl}  \n             opts={opts}\n            />} \n      </div>\n    )\n}\n\nexport default Banner\n","import React, { useEffect, useState } from 'react';\nimport './Navbar.css';\n\n\nfunction Navbar() {\n\n    const [show, handleShow] = useState(false);\n\n  useEffect(() => {\n      window.addEventListener(\"scroll\", () =>{\n          if(window.scrollY > 100){\n              handleShow(true);\n          }else handleShow(false);\n      });\n      return () => {\n          window.removeEventListener(\"scroll\");\n      }\n    \n  }, [])\n\n    return (\n        <div className={`navbar ${show && \"nav__black\"}`}>\n            \n            <img\n            className=\"nav__logo\"\n             src=\"http://www.freepnglogos.com/uploads/netflix-logo-0.png\"\n            alt=\"NETFLIX\" />\n            <img\n            className=\"nav__avatar\"\n            src=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png\"\n            alt=\"AVATAR\"\n            />\n            \n        </div>\n    )\n}\n\nexport default Navbar;\n","import React, { useEffect, useState } from 'react';\nimport './Row.css';\nimport axios from '../axios';\nimport YouTube from 'react-youtube';\nimport movieTrailer from 'movie-trailer'\n\nconst baseUrl = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({ title , fetchUrl, isLargeRow }) {\n  const [movies, setMovies] = useState([]);\n  \n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n\n  useEffect(() => {\n    async function fetchData(){\n     const request = await axios.get(fetchUrl);\n     setMovies(request.data.results);\n     return request;\n    } fetchData();\n    \n  }, [fetchUrl]);\n \n   const opts = {\n     height: \"390\",\n     width: \"100%\",\n     playerVars: {\n       autoplay:1,\n     },\n   }\n     \n   const handleClick = (movie) => {\n     if(trailerUrl){\n       setTrailerUrl(\"\");\n     }else{\n       movieTrailer(movie?.name || \"\")\n       .then(url => {\n         const urlParams = new URLSearchParams( new URL(url).search);\n         setTrailerUrl(urlParams.get('v'));\n\n       }).catch(error => console.log(error))\n     }\n       };\n\n    return (\n        <div className=\"row\" >\n            <h2>{title}</h2>\n\n            <div className=\"row__posters\" >\n\n              {movies?.map(movie =>(\n                <img \n                key={movie.id}\n                onClick={()=> handleClick(movie)}\n                className={`row__poster  ${isLargeRow && \"row__posterLarge\"} `}\n                src={`${baseUrl}${isLargeRow ? movie?.poster_path : movie?.backdrop_path}`}\n                alt={movie.name} \n                \n                />\n              ))}\n\n            </div>\n            {trailerUrl && <YouTube\n             videoId={trailerUrl}  \n             opts={opts}\n            />}\n        </div>\n    )\n}\n\nexport default Row;\n","import './App.css';\nimport Banner from './Components/Banner';\nimport Navbar from './Components/Navbar';\nimport Row from './Components/Row';\nimport requests from './requests';\n\n\n\nfunction App() {\n  return (\n    <div className=\"app\">\n\n      <Navbar />\n      \n      <Banner />\n       \n      <Row title=\"NETFLIX ORIGINALS\" fetchUrl={requests.fetchNetflixOriginals} \n      isLargeRow />\n\n      <Row title=\"Trending now\" fetchUrl={requests.fetchTrending} />\n\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\n\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />\n\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\n\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\n\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\n\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\n\n     \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}